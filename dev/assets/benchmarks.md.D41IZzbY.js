import{_ as r,c as o,o as n,aA as s,j as t,a}from"./chunks/framework.DPTuHFg6.js";const l="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_ComplexF64_type1_atomics.DRx0MKnK.svg",i="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_ComplexF64_type2_atomics.BZ_pI2a1.svg",m="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_Float64_type1_atomics.Buwylpbc.svg",d="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_Float64_type2_atomics.BsMl1pO-.svg",p="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_ComplexF64_type1_atomics.DZtqG-gT.svg",T="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_ComplexF64_type2_atomics.DSKR2orf.svg",h="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_Float64_type1_atomics.43WAN9Pc.svg",Q="/jipolanco.github.io/NonuniformFFTs.jl/dev/assets/benchmark_Float64_type2_atomics.Cj7roPov.svg",A=JSON.parse('{"title":"Benchmarks","description":"","frontmatter":{},"headers":[],"relativePath":"benchmarks.md","filePath":"benchmarks.md","lastUpdated":null}'),c={name:"benchmarks.md"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.886ex",height:"2.139ex",role:"img",focusable:"false",viewBox:"0 -863.3 4811.7 945.3","aria-hidden":"true"},g={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.009ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 888 683","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},w={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.815ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 4780.2 1083.2","aria-hidden":"true"},y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.495ex",height:"2.022ex",role:"img",focusable:"false",viewBox:"0 -871.8 1986.7 893.8","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},_={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.25ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 1436.6 886","aria-hidden":"true"},v={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},M={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.055ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 3118.2 1083.2","aria-hidden":"true"},C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},U={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.495ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 1986.7 886","aria-hidden":"true"};function P(H,e,j,N,V,I){return n(),o("div",null,[e[32]||(e[32]=s('<h1 id="Benchmarks" tabindex="-1">Benchmarks <a class="header-anchor" href="#Benchmarks" aria-label="Permalink to &quot;Benchmarks {#Benchmarks}&quot;">​</a></h1><ul><li><a href="./benchmarks#benchmarks">Benchmarks</a><ul><li><a href="./benchmarks#introduction">Introduction</a></li><li><a href="./benchmarks#CPU-CUDA-(H100)">CPU CUDA (H100)</a><ul><li><a href="./benchmarks#benchmarks-complex-cuda">benchmarks complex cuda</a><ul><li><a href="./benchmarks#Type-1-transforms">Type 1 transforms</a></li><li><a href="./benchmarks#benchmarks-complex-cuda-type2">benchmarks complex cuda type2</a></li></ul></li><li><a href="./benchmarks#Real-non-uniform-data">Real non uniform data</a><ul><li><a href="./benchmarks#Type-1-transforms-2">Type 1 transforms</a></li><li><a href="./benchmarks#Type-2-transforms">Type 2 transforms</a></li></ul></li><li><a href="./benchmarks#FINUFFT-set-up">FINUFFT set up</a></li></ul></li><li><a href="./benchmarks#CPU-AMDGPU-(MI300A)">CPU AMDGPU (MI300A)</a><ul><li><a href="./benchmarks#Complex-non-uniform-data">Complex non uniform data</a><ul><li><a href="./benchmarks#Type-1-transforms-3">Type 1 transforms</a></li><li><a href="./benchmarks#Type-2-transforms-2">Type 2 transforms</a></li></ul></li><li><a href="./benchmarks#Real-non-uniform-data-2">Real non uniform data</a><ul><li><a href="./benchmarks#Type-1-transforms-4">Type 1 transforms</a></li><li><a href="./benchmarks#Type-2-transforms-3">Type 2 transforms</a></li></ul></li></ul></li></ul></li></ul><h2 id="Introduction" tabindex="-1">Introduction <a class="header-anchor" href="#Introduction" aria-label="Permalink to &quot;Introduction {#Introduction}&quot;">​</a></h2>',3)),t("p",null,[e[14]||(e[14]=a("The benchmarks consist in type-1 and type-2 NUFFTs on a uniform 3D grid of fixed dimensions ",-1)),t("mjx-container",u,[(n(),o("svg",f,[...e[0]||(e[0]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1138,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1819.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(2875.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1533,393.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),e[1]||(e[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mi",null,"M"),t("mn",null,"3")]),t("mo",null,"="),t("msup",null,[t("mn",null,"256"),t("mn",null,"3")])])],-1))]),e[15]||(e[15]=a(" (excluding oversampling). We vary the number of non-uniform points ",-1)),t("mjx-container",g,[(n(),o("svg",b,[...e[2]||(e[2]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D441",d:"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z",style:{"stroke-width":"3"}})])])],-1)])])),e[3]||(e[3]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"N")])],-1))]),e[16]||(e[16]=a(", so that the point density ",-1)),t("mjx-container",x,[(n(),o("svg",w,[...e[4]||(e[4]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(794.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1850.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2738.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="msup" transform="translate(3238.6,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1138,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),e[5]||(e[5]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"ρ"),t("mo",null,"="),t("mi",null,"N"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"/")]),t("msup",null,[t("mi",null,"M"),t("mn",null,"3")])])],-1))]),e[17]||(e[17]=a(" takes values between ",-1)),t("mjx-container",y,[(n(),o("svg",F,[...e[6]||(e[6]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)])])),e[7]||(e[7]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"10"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"−"),t("mn",null,"4")])])])],-1))]),e[18]||(e[18]=a(" (very few points) and ",-1)),t("mjx-container",k,[(n(),o("svg",_,[...e[8]||(e[8]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),e[9]||(e[9]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"10"),t("mn",null,"1")])])],-1))]),e[19]||(e[19]=a(" (very dense). Points are randomly located in ",-1)),t("mjx-container",v,[(n(),o("svg",M,[...e[10]||(e[10]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1722.7,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(2292.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),e[11]||(e[11]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mn",null,"0"),t("mo",null,","),t("mn",null,"2"),t("mi",null,"π"),t("msup",null,[t("mo",{stretchy:"false"},")"),t("mn",null,"3")])])],-1))]),e[20]||(e[20]=a(" using a uniform distribution. The relative tolerance is fixed to ",-1)),t("mjx-container",C,[(n(),o("svg",U,[...e[12]||(e[12]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)])])),e[13]||(e[13]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"10"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"−"),t("mn",null,"6")])])])],-1))]),e[21]||(e[21]=a(". In NonuniformFFTs.jl, this can be achieved with the parameters ",-1)),e[22]||(e[22]=t("code",null,"σ = 1.5",-1)),e[23]||(e[23]=a(" (oversampling factor) and ",-1)),e[24]||(e[24]=t("code",null,"m = HalfSupport(4)",-1)),e[25]||(e[25]=a(" (see ",-1)),e[26]||(e[26]=t("a",{href:"/jipolanco.github.io/NonuniformFFTs.jl/dev/accuracy#accuracy"},"Accuracy",-1)),e[27]||(e[27]=a("). All tests are run in double precision (",-1)),e[28]||(e[28]=t("code",null,"Float64",-1)),e[29]||(e[29]=a(" or ",-1)),e[30]||(e[30]=t("code",null,"ComplexF64",-1)),e[31]||(e[31]=a(" non-uniform data).",-1))]),e[33]||(e[33]=s('<h2 id="CPU-CUDA-H100" tabindex="-1">CPU + CUDA (H100) <a class="header-anchor" href="#CPU-CUDA-H100" aria-label="Permalink to &quot;CPU + CUDA (H100) {#CPU-CUDA-H100}&quot;">​</a></h2><p>The following tests were run on the <a href="http://www.idris.fr/eng/jean-zay/cpu/jean-zay-cpu-hw-eng.html" target="_blank" rel="noreferrer">Jean–Zay supercomputer</a> (IDRIS, CNRS). We run on a compute node equipped with 2 Intel Xeon Platinum 8468 CPUs (96 cores per node) and 4 <strong>Nvidia H100</strong> SXM5 80 GB GPUs. We only used 1/4 of the node, meaning a single GPU and 24 CPU cores.</p><p>The benchmarks compare NonuniformFFTs.jl v0.8.3 (11/07/2025) and FINUFFT v2.4.1 (CPU and GPU; see <a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/benchmarks#FINUFFT-set-up">FINUFFT set-up</a> for details).</p><p>Each reported time includes (1) the time spent processing non-uniform points (<code>set_points!</code> / <code>(cu)finufft_setpts!</code>) and (2) the time spent on the actual transform (<code>exec_type{1,2}!</code> / <code>(cu)finufft_exec!</code>).</p><p>The script used for benchmarking can be found in <a href="https://github.com/jipolanco/NonuniformFFTs.jl/blob/master/benchmark/CPU+CUDA/run_benchmarks.jl" target="_blank" rel="noreferrer"><code>benchmark/CPU+CUDA/run_benchmarks.jl</code></a>.</p><h3 id="benchmarks-complex-cuda" tabindex="-1">Complex non-uniform data <a class="header-anchor" href="#benchmarks-complex-cuda" aria-label="Permalink to &quot;Complex non-uniform data {#benchmarks-complex-cuda}&quot;">​</a></h3><p> Libraries like FINUFFT or NFFT.jl only support complex non-uniform data. Therefore, these tests provide a direct comparison of the performance of different libraries. On the CPU (<b>crosses</b>), the performance of the multi-threaded NonuniformFFTs.jl (<span class="NonuniformFFTs">blue</span>) and FINUFFT (<span class="FINUFFT">orange</span>) implementations is quite comparable over a wide range of problem sizes. </p><p>On the GPU, we test two different implementations which are heavily inspired by the CuFINUFFT paper (<a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/index#Shih2021">Shih <em>et al.</em>, 2021</a>). The default one (<strong>filled circles</strong>) corresponds to setting <code>gpu_method = :global_memory</code> in <a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/API#NonuniformFFTs.PlanNUFFT"><code>PlanNUFFT</code></a>. This method is slightly faster than CuFINUFFT at low point densities, but slightly slower at large ones.</p><p>In fact, at large densities it actually faster to use the non-default <code>gpu_method = :shared_memory</code> option (<strong>open circles</strong>, labelled &quot;SM&quot; in the figures). The <code>:shared_memory</code> method performs some operations on GPU <a href="https://developer.nvidia.com/blog/using-shared-memory-cuda-cc/" target="_blank" rel="noreferrer">shared memory</a> (also called <a href="https://rocm.docs.amd.com/projects/HIP/en/latest/understand/hardware_implementation.html#local-data-share" target="_blank" rel="noreferrer">local data share</a>), which is small but much faster than the GPU&#39;s global memory. During spreading (type-1 transforms), this approach allows to reduce the number of atomic operations performed in global memory. Our implementation is inspired by the CuFINUFFT one (<a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/index#Shih2021">Shih <em>et al.</em>, 2021</a>) with a few differences. In particular, we completely avoid atomic operations on shared memory, which seems to speed up things quite a bit and might explain the important gains with respect to the CuFINUFFT implementation.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> We also provide a shared-memory implementation of type-2 transforms (interpolation). As seen <a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/benchmarks#benchmarks-complex-cuda-type2">below</a>, this can enable some minor gains at large point densities.</p><h4 id="Type-1-transforms" tabindex="-1">Type-1 transforms <a class="header-anchor" href="#Type-1-transforms" aria-label="Permalink to &quot;Type-1 transforms {#Type-1-transforms}&quot;">​</a></h4><p><img src="'+l+'" alt=""></p><h4 id="benchmarks-complex-cuda-type2" tabindex="-1">Type-2 transforms <a class="header-anchor" href="#benchmarks-complex-cuda-type2" aria-label="Permalink to &quot;Type-2 transforms {#benchmarks-complex-cuda-type2}&quot;">​</a></h4><p><img src="'+i+'" alt=""></p><h3 id="Real-non-uniform-data" tabindex="-1">Real non-uniform data <a class="header-anchor" href="#Real-non-uniform-data" aria-label="Permalink to &quot;Real non-uniform data {#Real-non-uniform-data}&quot;">​</a></h3><p>These tests are of interest for applications where <strong>non-uniform data is real-valued</strong> (imaginary part is zero). In NonuniformFFTs.jl, this enables the use of real-to-complex (type-1) and complex-to-real (type-2) FFTs and also allows to halve the amount of data processed during the spreading (type-1) and interpolation (type-2) procedures. The benchmarks showcase the important gains which can be obtained by using real-data transforms, which are not available in other libraries like FINUFFT or NFFT.jl.</p><p>In the plots below, the (Cu)FINUFFT curves are exactly the same as in the <a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/benchmarks#benchmarks-complex-cuda">complex-data</a> benchmarks.</p><h4 id="Type-1-transforms-2" tabindex="-1">Type-1 transforms <a class="header-anchor" href="#Type-1-transforms-2" aria-label="Permalink to &quot;Type-1 transforms {#Type-1-transforms-2}&quot;">​</a></h4><p><img src="'+m+'" alt=""></p><h4 id="Type-2-transforms" tabindex="-1">Type-2 transforms <a class="header-anchor" href="#Type-2-transforms" aria-label="Permalink to &quot;Type-2 transforms {#Type-2-transforms}&quot;">​</a></h4><p><img src="'+d+'" alt=""></p><h3 id="FINUFFT-set-up" tabindex="-1">FINUFFT set-up <a class="header-anchor" href="#FINUFFT-set-up" aria-label="Permalink to &quot;FINUFFT set-up {#FINUFFT-set-up}&quot;">​</a></h3><p>We used FINUFFT via its Julia wrapper <a href="https://github.com/ludvigak/FINUFFT.jl" target="_blank" rel="noreferrer">FINUFFT.jl</a> v3.4.0. For performance reasons, the (Cu)FINUFFT libraries were compiled locally and the FINUFFT.jl sources were modified accordingly as described <a href="https://github.com/ludvigak/FINUFFT.jl?tab=readme-ov-file#advanced-installation-and-locally-compiling-binaries" target="_blank" rel="noreferrer">here</a>. FINUFFT was compiled using Nvidia&#39;s <code>nvc++</code> CPU compiler using CMake with its default flags in <code>Release</code> mode. For CuFINUFFT, we set <code>CMAKE_CUDA_ARCHITECTURES=90</code> (for an NVIDIA H100) and used the <code>nvcc</code> compiler included in CUDA 12.8.</p><p>All FINUFFT benchmarks were run with relative tolerance <code>1e-6</code>. Moreover, the following options were used:</p><ul><li><p><code>modeord = 1</code> (use FFTW ordering, for consistency with NonuniformFFTs)</p></li><li><p><code>spread_sort = 1</code> (enable point sorting in CPU plans)</p></li><li><p><code>spread_kerevalmeth = 1</code> (use the recommended piecewise polynomial evaluation)</p></li><li><p><code>fftw = FFTW.ESTIMATE</code> (CPU plans)</p></li></ul><p>and for GPU plans:</p><ul><li><p><code>gpu_sort = 1</code> (enable point sorting)</p></li><li><p><code>gpu_kerevalmeth = 1</code> (use piecewise polynomial evaluation)</p></li><li><p><code>gpu_method = 1</code> (global memory method, &quot;non-uniform points driven&quot;)</p></li></ul><p>We also tried <code>gpu_method = 2</code> (open symbols, labelled SM) which seems to be considerably slower in nearly all cases (in three dimensions, at the requested tolerance).</p><h2 id="CPU-AMDGPU-MI300A" tabindex="-1">CPU + AMDGPU (MI300A) <a class="header-anchor" href="#CPU-AMDGPU-MI300A" aria-label="Permalink to &quot;CPU + AMDGPU (MI300A) {#CPU-AMDGPU-MI300A}&quot;">​</a></h2><p>NonuniformFFTs.jl also runs on other GPU platforms such as AMD GPUs. The following tests were run on the <a href="https://www.cines.fr/calcul/adastra/" target="_blank" rel="noreferrer">Adastra supercomputer</a> (CINES). We run on a compute node equipped with 4 <strong>AMD Instinct MI300A</strong> accelerators. Each card comes with 24 CPU cores and a GPU. We only used 1/4 of the node, meaning a single MI300A card.</p><p>The benchmarks compare NonuniformFFTs.jl v0.8.3 (11/07/2025) and FINUFFT v2.4.1 (CPU only, using Cray compilers).</p><p>Each reported time includes (1) the time spent processing non-uniform points (<code>set_points!</code> / <code>(cu)finufft_setpts!</code>) and (2) the time spent on the actual transform (<code>exec_type{1,2}!</code> / <code>(cu)finufft_exec!</code>).</p><p>The script used for benchmarking can be found in <a href="https://github.com/jipolanco/NonuniformFFTs.jl/blob/master/benchmark/CPU+AMDGPU/run_benchmarks.jl" target="_blank" rel="noreferrer"><code>benchmark/CPU+AMDGPU/run_benchmarks.jl</code></a>.</p><p>The CPU tests shown below used the <code>use_atomics = true</code> option of <a href="/jipolanco.github.io/NonuniformFFTs.jl/dev/API#NonuniformFFTs.PlanNUFFT"><code>PlanNUFFT</code></a>, as the alternative really degraded performance of type-1 transforms in that machine. Full results with the two variants are available in <a href="https://github.com/jipolanco/NonuniformFFTs.jl/blob/master/benchmark/CPU+AMDGPU/plots" target="_blank" rel="noreferrer">this directory</a>.</p><p>As can be seen below, compared to CUDA, on AMDGPU the <code>gpu_method = :shared_memory</code> (SM) option becomes faster than the default at relatively low point densities, while the default <code>:global_memory</code> option scales very poorly for a large number of points. This is something to take into account when using NonuniformFFTs.jl on AMD GPUs.</p><h3 id="Complex-non-uniform-data" tabindex="-1">Complex non-uniform data <a class="header-anchor" href="#Complex-non-uniform-data" aria-label="Permalink to &quot;Complex non-uniform data {#Complex-non-uniform-data}&quot;">​</a></h3><h4 id="Type-1-transforms-3" tabindex="-1">Type-1 transforms <a class="header-anchor" href="#Type-1-transforms-3" aria-label="Permalink to &quot;Type-1 transforms {#Type-1-transforms-3}&quot;">​</a></h4><p><img src="'+p+'" alt=""></p><h4 id="Type-2-transforms-2" tabindex="-1">Type-2 transforms <a class="header-anchor" href="#Type-2-transforms-2" aria-label="Permalink to &quot;Type-2 transforms {#Type-2-transforms-2}&quot;">​</a></h4><p><img src="'+T+'" alt=""></p><h3 id="Real-non-uniform-data-2" tabindex="-1">Real non-uniform data <a class="header-anchor" href="#Real-non-uniform-data-2" aria-label="Permalink to &quot;Real non-uniform data {#Real-non-uniform-data-2}&quot;">​</a></h3><h4 id="Type-1-transforms-4" tabindex="-1">Type-1 transforms <a class="header-anchor" href="#Type-1-transforms-4" aria-label="Permalink to &quot;Type-1 transforms {#Type-1-transforms-4}&quot;">​</a></h4><p><img src="'+h+'" alt=""></p><h4 id="Type-2-transforms-3" tabindex="-1">Type-2 transforms <a class="header-anchor" href="#Type-2-transforms-3" aria-label="Permalink to &quot;Type-2 transforms {#Type-2-transforms-3}&quot;">​</a></h4><p><img src="'+Q+'" alt=""></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The CuFINUFFT shared-memory implementation might perform better (relative to the global-memory method) for two-dimensional or low-accuracy problems. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',46))])}const D=r(c,[["render",P]]);export{A as __pageData,D as default};
